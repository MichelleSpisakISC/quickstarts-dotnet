<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InterSystems.Data.IRISEntity5</name>
    </assembly>
    <members>
        <member name="T:InterSystems.BuildInfo">
            <summary>
            Version Information
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.DdlBuilder.AppendSql(System.String)">
            <summary>
            Appends raw SQL into the string builder.
            </summary>
            <param name="text">Raw SQL string to append into the string builder.</param>
        </member>
        <member name="M:InterSystems.Data.Entity.DdlBuilder.AppendNewLine">
            <summary>
            Appends new line for visual formatting or for ending a comment.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.DdlBuilder.AppendSqlInvariantFormat(System.String,System.Object[])">
            <summary>
            Append raw SQL into the string builder with formatting options and invariant culture formatting.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
        </member>
        <member name="T:InterSystems.Data.Entity.ProviderManifest">
            <summary>
            The Provider Manifest for SQL Server
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.ProviderManifest.varcharMaxSize">
            <summary>
            maximum size of sql server unicode 
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="manifestToken">A token used to infer the capabilities of the store</param>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.EscapeLikeText(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Function to detect wildcard characters %, _, [ and ^ and escape them with a preceding ~
            This escaping is used when StartsWith, EndsWith and Contains canonical and CLR functions
            are translated to their equivalent LIKE expression
            </summary>
            <param name="text">Original input as specified by the user</param>
            <param name="alwaysEscapeEscapeChar">escape the escape character ~ regardless whether wildcard 
            characters were encountered </param>
            <param name="usedEscapeChar">true if the escaping was performed, false if no escaping was required</param>
            <returns>The escaped string that can be used as pattern in a LIKE expression</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.GetDbInformation(System.String)">
            <summary>
            Providers should override this to return information specific to their provider.  
            
            This method should never return null.
            </summary>
            <param name="informationType">The name of the information to be retrieved.</param>
            <returns>An XmlReader at the begining of the information requested.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            This method takes a type and a set of facets and returns the best mapped equivalent type 
            in EDM.
            </summary>
            <param name="storeType">A TypeUsage encapsulating a store type and a set of facets</param>
            <returns>A TypeUsage encapsulating an EDM type and a set of facets</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            This method takes a type and a set of facets and returns the best mapped equivalent type 
            in SQL Server, taking the store version into consideration.
            </summary>
            <param name="edmType">A TypeUsage encapsulating an EDM type and a set of facets</param>
            <returns>A TypeUsage encapsulating a store type and a set of facets</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
            <summary>
            Returns true, IRISClient supports escaping strings to be used as arguments to like
            The escape character is '~'
            </summary>
            <param name="escapeCharacter">The character '~'</param>
            <returns>True</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderManifest.EscapeLikeArgument(System.String)">
            <summary>
            Escapes the wildcard characters and the escape character in the given argument.
            </summary>
            <param name="argument"></param>
            <returns>Equivalent to the argument, with the wildcard characters and the escape character escaped</returns>
        </member>
        <member name="T:InterSystems.Data.Entity.ProviderServices">
            <summary>
            The DbProviderServices implementation for the IRISClient provider for Cache Server. 
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.CreateDbCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
            <summary>
            Create a Command Definition object, given the connection and command tree 
            </summary>
            <param name="manifest"> provider manifest that was determined from metadata</param>
            <param name="commandTree">command tree for the statement </param>
            <returns>an executable command definition object </returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.CreateCommand(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
            <summary>
            Create a Command object, given the provider manifest and command tree
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
            <summary>
            Returns provider manifest token for a given connection. 
            </summary>
            <param name="connection"></param>
            <returns>Constant '2008' in this implementation.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.GetDbProviderManifest(System.String)">
            <summary>
            Returns the provider manifest by using the specified version information
            </summary>
            <param name="versionHint">The token information associated with the provider manifest.</param>
            <returns>The provider manifest by using the specified version information.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.DbCreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
            <summary>
            Generates a data definition language (DDL) script that creates schema objects (tables, primary keys, foreign keys) based on the contents of the StoreItemCollection parameter and targeted for the version of the database corresponding to the provider manifest token. 
            </summary>
            <param name="providerManifestToken">The provider manifest token identifying the target version</param>
            <param name="storeItemCollection">The structure of the database. </param>
            <returns>A DDL script that creates schema objects based on the contents of the StoreItemCollection parameter and targeted for the version of the database corresponding to the provider manifest token. </returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
            <summary>
            Create the database (Namespace)
            </summary>
            <param name="connection"></param>
            <param name="commandTimeout"></param>
            <param name="storeItemCollection"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
            <summary>
            Determines whether the database (Namespace) for the given connection exists.
            </summary>
            <param name="connection"></param>
            <param name="commandTimeout"></param>
            <param name="storeItemCollection"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
            <summary>
            Delete the database (Namespace) for the given connection
            </summary>
            <param name="connection"></param>
            <param name="commandTimeout"></param>
            <param name="storeItemCollection"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.CreateCacheParameter(System.String,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.ParameterMode,System.Object)">
            <summary>
            Creates a CacheParameter given a name, type, and direction
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.GetCacheDbType(System.Data.Metadata.Edm.TypeUsage,System.Boolean,System.Nullable{System.Int32}@)">
            <summary>
            Determines CacheDbType for the given primitive type. Extracts facet
            information as well.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.GetParameterSize(System.Data.Metadata.Edm.TypeUsage,System.Boolean)">
            <summary>
            Determines preferred value for CacheParameter.Size. Returns null
            where there is no preference.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.GetStringDbType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Chooses the appropriate IRISDbType for the given string type.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.ProviderServices.GetBinaryDbType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Chooses the appropriate IRISDbType for the given binary type.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.IRISFunctions">
            <summary>
            Contains function stubs that expose CacheServer methods in Linq to Entities.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM_AGG
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM_AGG
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Ascii(System.String)">
            <summary>
            Proxy for the function CacheServer.ASCII
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Char(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.CHAR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CharIndex(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.CHARINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CharIndex(System.Byte[],System.Byte[])">
            <summary>
            Proxy for the function CacheServer.CHARINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.CHARINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.CHARINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Proxy for the function CacheServer.CHARINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
            <summary>
            Proxy for the function CacheServer.CHARINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Difference(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.DIFFERENCE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.NChar(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.NCHAR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.PatIndex(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.PATINDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.QuoteName(System.String)">
            <summary>
            Proxy for the function CacheServer.QUOTENAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.QuoteName(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.QUOTENAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Replicate(System.String,System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.REPLICATE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.SoundCode(System.String)">
            <summary>
            Proxy for the function CacheServer.SOUNDEX
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Space(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.SPACE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.StringConvert(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.STR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.StringConvert(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.STR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.STR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.STR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.STR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.STR
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Proxy for the function CacheServer.STUFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Unicode(System.String)">
            <summary>
            Proxy for the function CacheServer.UNICODE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Acos(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.ACOS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Acos(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.ACOS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Asin(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.ASIN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Asin(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.ASIN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Atan(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.ATAN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Atan(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.ATAN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.ATN2
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.ATN2
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Cos(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.COS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Cos(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.COS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Cot(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.COT
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Cot(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.COT
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Degrees(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.DEGREES
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Degrees(System.Nullable{System.Int64})">
            <summary>
            Proxy for the function CacheServer.DEGREES
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Degrees(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.DEGREES
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Degrees(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.DEGREES
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Exp(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.EXP
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Exp(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.EXP
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Log(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.LOG
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Log(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.LOG
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Log10(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.LOG10
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Log10(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.LOG10
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Pi">
            <summary>
            Proxy for the function CacheServer.PI
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Radians(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.RADIANS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Radians(System.Nullable{System.Int64})">
            <summary>
            Proxy for the function CacheServer.RADIANS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Radians(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.RADIANS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Radians(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.RADIANS
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Rand">
            <summary>
            Proxy for the function CacheServer.RAND
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Rand(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.RAND
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Sign(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.SIGN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Sign(System.Nullable{System.Int64})">
            <summary>
            Proxy for the function CacheServer.SIGN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Sign(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.SIGN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Sign(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.SIGN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Sin(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.SIN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Sin(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.SIN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.SquareRoot(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.SQRT
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.SquareRoot(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.SQRT
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Square(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.SQUARE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Square(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.SQUARE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Tan(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.TAN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Tan(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.TAN
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATEADD
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATEADD
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATEADD
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Proxy for the function CacheServer.DATEADD
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATEDIFF
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateName(System.String,System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATENAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateName(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.DATENAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATENAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATENAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATEPART
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATEPART
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DatePart(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.DATEPART
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATEPART
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.GetDate">
            <summary>
            Proxy for the function CacheServer.GETDATE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.GetUtcDate">
            <summary>
            Proxy for the function CacheServer.GETUTCDATE
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.Boolean})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.String)">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Byte[])">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.DataLength(System.Nullable{System.Guid})">
            <summary>
            Proxy for the function CacheServer.DATALENGTH
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Boolean})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.String)">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Byte[])">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Guid})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Byte[],System.Byte[])">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.String,System.String,System.String)">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Proxy for the function CacheServer.CHECKSUM
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CurrentTimestamp">
            <summary>
            Proxy for the function CacheServer.CURRENT_TIMESTAMP
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.CurrentUser">
            <summary>
            Proxy for the function CacheServer.CURRENT_USER
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.HostName">
            <summary>
            Proxy for the function CacheServer.HOST_NAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.UserName(System.Nullable{System.Int32})">
            <summary>
            Proxy for the function CacheServer.USER_NAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.UserName">
            <summary>
            Proxy for the function CacheServer.USER_NAME
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.IsNumeric(System.String)">
            <summary>
            Proxy for the function CacheServer.ISNUMERIC
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.IRISFunctions.IsDate(System.String)">
            <summary>
            Proxy for the function CacheServer.ISDATE
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.DmlSqlGenerator">
            <summary>
            Class generating SQL for a DML command tree.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.DmlSqlGenerator.GenerateReturningSql(System.Text.StringBuilder,System.Data.Common.CommandTrees.DbModificationCommandTree,InterSystems.Data.Entity.SQLGen.DmlSqlGenerator.ExpressionTranslator,System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Generates SQL fragment returning server-generated values.
            Requires: translator knows about member values so that we can figure out
            how to construct the key predicate.
            <code>
            Sample SQL:
                
                select IdentityValue
                from dbo.MyTable
                where @@ROWCOUNT > 0 and IdentityValue = scope_identity()
            
            or
            
                select TimestamptValue
                from dbo.MyTable
                where @@ROWCOUNT > 0 and Id = 1
            
            Note that we filter on rowcount to ensure no rows are returned if no rows were modified.
            </code>
            </summary>
            <param name="commandText">Builder containing command text</param>
            <param name="tree">Modification command tree</param>
            <param name="translator">Translator used to produce DML SQL statement
            for the tree</param>
            <param name="returning">Returning expression. If null, the method returns
            immediately without producing a SELECT statement.</param>
            
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.DmlSqlGenerator.ExpressionTranslator">
            <summary>
            Lightweight expression translator for DML expression trees, which have constrained
            scope and support.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.DmlSqlGenerator.ExpressionTranslator.RegisterMemberValue(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Call this method to register a property value pair so the translator "remembers"
            the values for members of the row being modified. These values can then be used
            to form a predicate for server-generation (based on the key of the row)
            </summary>
            <param name="propertyExpression">DbExpression containing the column reference (property expression).</param>
            <param name="value">DbExpression containing the value of the column.</param>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.ISqlFragment">
            <summary>
            Represents the sql fragment for any node in the query tree.
            </summary>
            <remarks>
            The nodes in a query tree produce various kinds of sql
            <list type="bullet">
            <item>A select statement.</item>
            <item>A reference to an extent. (symbol)</item>
            <item>A raw string.</item>
            </list>
            We have this interface to allow for a common return type for the methods
            in the expression visitor <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1"/>
            
            At the end of translation, the sql fragments are converted into real strings.
            </remarks>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.ISqlFragment.WriteSql(InterSystems.Data.Entity.SQLGen.SqlWriter,InterSystems.Data.Entity.SQLGen.SqlGenerator)">
            <summary>
            Write the string represented by this fragment into the stream.
            </summary>
            <param name="writer">The stream that collects the strings.</param>
            <param name="sqlGenerator">Context information used for renaming.
            The global lists are used to generated new names without collisions.</param>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.JoinSymbol">
            <summary>
            A Join symbol is a special kind of Symbol.
            It has to carry additional information
            <list type="bullet">
            <item>ColumnList for the list of columns in the select clause if this
            symbol represents a sql select statement.  This is set by <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddDefaultColumns(InterSystems.Data.Entity.SQLGen.SqlSelectStatement)"/>. </item>
            <item>ExtentList is the list of extents in the select clause.</item>
            <item>FlattenedExtentList - if the Join has multiple extents flattened at the 
            top level, we need this information to ensure that extent aliases are renamed
            correctly in <see cref="M:InterSystems.Data.Entity.SQLGen.SqlSelectStatement.WriteSql(InterSystems.Data.Entity.SQLGen.SqlWriter,InterSystems.Data.Entity.SQLGen.SqlGenerator)"/></item>
            <item>NameToExtent has all the extents in ExtentList as a dictionary.
            This is used by <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)"/> to flatten
            record accesses.</item>
            <item>IsNestedJoin - is used to determine whether a JoinSymbol is an 
            ordinary join symbol, or one that has a corresponding SqlSelectStatement.</item>
            </list>
            
            All the lists are set exactly once, and then used for lookups/enumerated.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.Symbol">
             <summary>
             <see cref="T:InterSystems.Data.Entity.SQLGen.SymbolTable"/>
             This class represents an extent/nested select statement,
             or a column.
            
             The important fields are Name, Type and NewName.
             NewName starts off the same as Name, and is then modified as necessary.
            
            
             The rest are used by special symbols.
             e.g. NeedsRenaming is used by columns to indicate that a new name must
             be picked for the column in the second phase of translation.
            
             IsUnnest is used by symbols for a collection expression used as a from clause.
             This allows <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddFromSymbol(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.String,InterSystems.Data.Entity.SQLGen.Symbol,System.Boolean)"/> to add the column list
             after the alias.
            
             </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.Symbol.WriteSql(InterSystems.Data.Entity.SQLGen.SqlWriter,InterSystems.Data.Entity.SQLGen.SqlGenerator)">
             <summary>
             Write this symbol out as a string for sql.  This is just
             the new name of the symbol (which could be the same as the old name).
            
             We rename columns here if necessary.
             </summary>
             <param name="writer"></param>
             <param name="sqlGenerator"></param>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.MetadataHelpers">
            <summary>
            A set of static helpers for type metadata
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.NullableFacetName">
            <summary>
            Name of the Nullable Facet
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.GetEdmType``1(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Cast the EdmType of the given type usage to the given TEdmType
            </summary>
            <typeparam name="TEdmType"></typeparam>
            <param name="typeUsage"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.GetElementTypeUsage(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Gets the TypeUsage of the elment if the given type is a collection type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.GetProperties(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Retrieves the properties of in the EdmType underlying the input type usage, 
             if that EdmType is a structured type (EntityType, RowType). 
            </summary>
            <param name="typeUsage"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.GetProperties(System.Data.Metadata.Edm.EdmType)">
            <summary>
            Retrieves the properties of the given EdmType, if it is
             a structured type (EntityType, RowType). 
            </summary>
            <param name="edmType"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsCollectionType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Is the given type usage over a collection type
            </summary>
            <param name="typeUsage"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsCollectionType(System.Data.Metadata.Edm.EdmType)">
            <summary>
            Is the given type a collection type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsPrimitiveType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Is the given type usage over a primitive type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsPrimitiveType(System.Data.Metadata.Edm.EdmType)">
            <summary>
            Is the given type a primitive type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsRowType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Is the given type usage over a row type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsEntityType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Is the given type usage over an entity type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsRowType(System.Data.Metadata.Edm.EdmType)">
            <summary>
            Is the given type a row type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.IsEntityType(System.Data.Metadata.Edm.EdmType)">
            <summary>
            Is the given type an Enity Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.TryGetPrimitiveTypeKind(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.PrimitiveTypeKind@)">
            <summary>
            Gets the type of the given type usage if it is a primitive type
            </summary>
            <param name="type"></param>
            <param name="typeKind"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.TryGetValueForMetadataProperty``1(System.Data.Metadata.Edm.MetadataItem,System.String)">
            <summary>
            Gets the value for the metadata property with the given name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.MaxLengthFacetName">
            <summary>
            Name of the MaxLength Facet
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.UnicodeFacetName">
            <summary>
            Name of the Unicode Facet
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.FixedLengthFacetName">
            <summary>
            Name of the FixedLength Facet
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.PreserveSecondsFacetName">
            <summary>
            Name of the PreserveSeconds Facet
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.PrecisionFacetName">
            <summary>
            Name of the Precision Facet
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.ScaleFacetName">
            <summary>
            Name of the Scale Facet
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.MetadataHelpers.DefaultValueFacetName">
            <summary>
            Name of the DefaultValue Facet
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.GetFacetValueOrDefault``1(System.Data.Metadata.Edm.TypeUsage,System.String,``0)">
            <summary>
            Get the value specified on the given type usage for the given facet name.
            If the faces does not have a value specifid or that value is null returns
            the default value for that facet.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="facetName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.MetadataHelpers.TryGetTypeFacetDescriptionByName(System.Data.Metadata.Edm.EdmType,System.String,System.Data.Metadata.Edm.FacetDescription@)">
            <summary>
            Given a facet name and an EdmType, tries to get that facet's description.
            </summary>
            <param name="edmType"></param>
            <param name="facetName"></param>
            <param name="facetDescription"></param>
            <returns></returns>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.SqlBuilder">
            <summary>
            This class is like StringBuilder.  While traversing the tree for the first time, 
            we do not know all the strings that need to be appended e.g. things that need to be
            renamed, nested select statements etc.  So, we use a builder that can collect
            all kinds of sql fragments.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlBuilder.Append(System.Object)">
            <summary>
            Add an object to the list - we do not verify that it is a proper sql fragment
            since this is an internal method.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlBuilder.AppendLine">
            <summary>
            This is to pretty print the SQL.  The writer <see cref="M:InterSystems.Data.Entity.SQLGen.SqlWriter.Write(System.String)"/>
            needs to know about new lines so that it can add the right amount of 
            indentation at the beginning of lines.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlBuilder.WriteSql(InterSystems.Data.Entity.SQLGen.SqlWriter,InterSystems.Data.Entity.SQLGen.SqlGenerator)">
            <summary>
            We delegate the writing of the fragment to the appropriate type.
            </summary>
            <param name="writer"></param>
            <param name="sqlGenerator"></param>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.SqlBuilder.IsEmpty">
            <summary>
            Whether the builder is empty.  This is used by the <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbProjectExpression)"/>
            to determine whether a sql statement can be reused.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.SqlGenerator">
             <summary>
             Translates the command object into a SQL string targeting 
             SQL Server 2005 or SQL Server 2008.
             </summary>
             <remarks>
             The translation is implemented as a visitor <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1"/>
             over the query tree.  It makes a single pass over the tree, collecting the sql
             fragments for the various nodes in the tree <see cref="T:InterSystems.Data.Entity.SQLGen.ISqlFragment"/>.
            
             The major operations are
             <list type="bullet">
             <item>Select statement minimization.  Multiple nodes in the query tree
             that can be part of a single SQL select statement are merged. e.g. a
             Filter node that is the input of a Project node can typically share the
             same SQL statement.</item>
             <item>Alpha-renaming.  As a result of the statement minimization above, there
             could be name collisions when using correlated subqueries
             <example>
             <code>
             Filter(
                 b = Project( c.x
                     c = Extent(foo)
                     )
                 exists (
                     Filter(
                         c = Extent(foo)
                         b.x = c.x
                         )
                 )
             )
             </code>
             The first Filter, Project and Extent will share the same SQL select statement.
             The alias for the Project i.e. b, will be replaced with c.
             If the alias c for the Filter within the exists clause is not renamed,
             we will get <c>c.x = c.x</c>, which is incorrect.
             Instead, the alias c within the second filter should be renamed to c1, to give
             <c>c.x = c1.x</c> i.e. b is renamed to c, and c is renamed to c1.
             </example>
             </item>
             <item>Join flattening.  In the query tree, a list of join nodes is typically
             represented as a tree of Join nodes, each with 2 children. e.g.
             <example>
             <code>
             a = Join(InnerJoin
                 b = Join(CrossJoin
                     c = Extent(foo)
                     d = Extent(foo)
                     )
                 e = Extent(foo)
                 on b.c.x = e.x
                 )
             </code>
             If translated directly, this will be translated to
             <code>
             FROM ( SELECT c.*, d.*
                     FROM foo as c
                     CROSS JOIN foo as d) as b
             INNER JOIN foo as e on b.x' = e.x
             </code>
             It would be better to translate this as
             <code>
             FROM foo as c
             CROSS JOIN foo as d
             INNER JOIN foo as e on c.x = e.x
             </code>
             This allows the optimizer to choose an appropriate join ordering for evaluation.
             </example>
             </item>
             <item>Select * and column renaming.  In the example above, we noticed that
             in some cases we add <c>SELECT * FROM ...</c> to complete the SQL
             statement. i.e. there is no explicit PROJECT list.
             In this case, we enumerate all the columns available in the FROM clause
             This is particularly problematic in the case of Join trees, since the columns
             from the extents joined might have the same name - this is illegal.  To solve
             this problem, we will have to rename columns if they are part of a SELECT *
             for a JOIN node - we do not need renaming in any other situation.
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddDefaultColumns(InterSystems.Data.Entity.SQLGen.SqlSelectStatement)"/>.
             </item>
             </list>
            
             <para>
             Renaming issues.
             When rows or columns are renamed, we produce names that are unique globally
             with respect to the query.  The names are derived from the original names,
             with an integer as a suffix. e.g. CustomerId will be renamed to CustomerId1,
             CustomerId2 etc.
            
             Since the names generated are globally unique, they will not conflict when the
             columns of a JOIN SELECT statement are joined with another JOIN. 
            
             </para>
            
             <para>
             Record flattening.
             SQL server does not have the concept of records.  However, a join statement
             produces records.  We have to flatten the record accesses into a simple
             <c>alias.column</c> form.  <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)"/>
             </para>
            
             <para>
             Building the SQL.
             There are 2 phases
             <list type="numbered">
             <item>Traverse the tree, producing a sql builder <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></item>
             <item>Write the SqlBuilder into a string, renaming the aliases and columns
             as needed.</item>
             </list>
            
             In the first phase, we traverse the tree.  We cannot generate the SQL string
             right away, since
             <list type="bullet">
             <item>The WHERE clause has to be visited before the from clause.</item>
             <item>extent aliases and column aliases need to be renamed.  To minimize
             renaming collisions, all the names used must be known, before any renaming
             choice is made.</item>
             </list>
             To defer the renaming choices, we use symbols <see cref="T:InterSystems.Data.Entity.SQLGen.Symbol"/>.  These
             are renamed in the second phase.
            
             Since visitor methods cannot transfer information to child nodes through
             parameters, we use some global stacks,
             <list type="bullet">
             <item>A stack for the current SQL select statement.  This is needed by
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)"/> to create a
             list of free variables used by a select statement.  This is needed for
             alias renaming.
             </item>
             <item>A stack for the join context.  When visiting a <see cref="T:System.Data.Common.CommandTrees.DbScanExpression"/>,
             we need to know whether we are inside a join or not.  If we are inside
             a join, we do not create a new SELECT statement.</item>
             </list>
             </para>
            
             <para>
             Global state.
             To enable renaming, we maintain
             <list type="bullet">
             <item>The set of all extent aliases used.</item>
             <item>The set of all column aliases used.</item>
             </list>
            
             Finally, we have a symbol table to lookup variable references.  All references
             to the same extent have the same symbol.
             </para>
            
             <para>
             Sql select statement sharing.
            
             Each of the relational operator nodes
             <list type="bullet">
             <item>Project</item>
             <item>Filter</item>
             <item>GroupBy</item>
             <item>Sort/OrderBy</item>
             </list>
             can add its non-input (e.g. project, predicate, sort order etc.) to
             the SQL statement for the input, or create a new SQL statement.
             If it chooses to reuse the input's SQL statement, we play the following
             symbol table trick to accomplish renaming.  The symbol table entry for
             the alias of the current node points to the symbol for the input in
             the input's SQL statement.
             <example>
             <code>
             Project(b.x
                 b = Filter(
                     c = Extent(foo)
                     c.x = 5)
                 )
             </code>
             The Extent node creates a new SqlSelectStatement.  This is added to the
             symbol table by the Filter as {c, Symbol(c)}.  Thus, <c>c.x</c> is resolved to
             <c>Symbol(c).x</c>.
             Looking at the project node, we add {b, Symbol(c)} to the symbol table if the
             SQL statement is reused, and {b, Symbol(b)}, if there is no reuse.
            
             Thus, <c>b.x</c> is resolved to <c>Symbol(c).x</c> if there is reuse, and to
             <c>Symbol(b).x</c> if there is no reuse.
             </example>
             </para>
             </remarks>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.SqlGenerator.selectStatementStack">
            <summary>
            Every relational node has to pass its SELECT statement to its children
            This allows them (DbVariableReferenceExpression eventually) to update the list of
            outer extents (free variables) used by this select statement.
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.SqlGenerator.isParentAJoinStack">
            <summary>
            Nested joins and extents need to know whether they should create
            a new Select statement, or reuse the parent's.  This flag
            indicates whether the parent is a join or not.
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.SQLGen.SqlGenerator.isVarRefSingle">
            <summary>
            VariableReferenceExpressions are allowed only as children of DbPropertyExpression
            or MethodExpression.  The cheapest way to ensure this is to set the following
            property in DbVariableReferenceExpression and reset it in the allowed parent expressions.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.InitializeBuiltInFunctionHandlers">
            <summary>
            All special built-in functions and their handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.InitializeCanonicalFunctionHandlers">
            <summary>
            All special non-aggregate canonical functions and their handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.InitializeDatepartKeywords">
            <summary>
            Valid datepart values
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.InitializeFunctionNameToOperatorDictionary">
            <summary>
            Initializes the mapping from functions to T-SQL operators
            for all functions that translate to T-SQL operators
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.InitializeDateAddFunctionNameToDatepartDictionary">
            <summary>
            Initalizes the mapping from names of canonical function for date/time addition
            to corresponding dateparts
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.InitializeDateDiffFunctionNameToDatepartDictionary">
            <summary>
            Initalizes the mapping from names of canonical function for date/time difference
            to corresponding dateparts
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.#ctor(InterSystems.Data.Entity.StoreVersion)">
            <summary>
            Basic constructor. 
            </summary>
            <param name="storeVersion">server version</param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.GenerateSql(System.Data.Common.CommandTrees.DbCommandTree,InterSystems.Data.Entity.StoreVersion,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.CommandType@)">
            <summary>
            General purpose static function that can be called from System.Data assembly
            </summary>
            <param name="tree">command tree</param>
            <param name="version">version</param>
            <param name="parameters">Parameters to add to the command tree corresponding
            to constants in the command tree. Used only in ModificationCommandTrees.</param>
            <param name="commandType"></param>
            <returns>The string representing the SQL to be executed.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.GenerateSql(System.Data.Common.CommandTrees.DbQueryCommandTree)">
             <summary>
             Translate a command tree to a SQL string.
            
             The input tree could be translated to either a SQL SELECT statement
             or a SELECT expression.  This choice is made based on the return type
             of the expression
             CollectionType => select statement
             non collection type => select expression
             </summary>
             <param name="tree"></param>
             <returns>The string representing the SQL to be executed.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.GenerateFunctionSql(System.Data.Common.CommandTrees.DbFunctionCommandTree,System.Data.CommandType@)">
            <summary>
            Translate a function command tree to a SQL string.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.WriteSql(InterSystems.Data.Entity.SQLGen.ISqlFragment)">
            <summary>
            Convert the SQL fragments to a string.
            We have to setup the Stream for writing.
            </summary>
            <param name="sqlStatement"></param>
            <returns>A string representing the SQL to be executed.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
            <summary>
            Translate(left) AND Translate(right)
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/>.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
            <summary>
            An apply is just like a join, so it shares the common join processing
            in <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitJoinExpression(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding},System.Data.Common.CommandTrees.DbExpressionKind,System.String,System.Data.Common.CommandTrees.DbExpression)"/>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/>.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            For binary expressions, we delegate to <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitBinaryExpression(System.String,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Boolean)"/>.
            We handle the other expressions directly.
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
            <summary>
            If the ELSE clause is null, we do not write it out.
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
             <summary>
            
             </summary>
             <param name="e"></param>
             <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            The parser generates Not(Equals(...)) for &lt;&gt;.
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/>.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
            <summary>
            Constants will be send to the store as part of the generated TSQL, not as parameters
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/>.  Strings are wrapped in single
            quotes and escaped.  Numbers are written literally.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            The DISTINCT has to be added to the beginning of SqlSelectStatement.Select,
            but it might be too late for that.  So, we use a flag on SqlSelectStatement
            instead, and add the "DISTINCT" in the second phase.
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
            <summary>
            An element expression returns a scalar - so it is translated to
            ( Select ... )
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)"/>
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Only concrete expression types will be visited.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
             <summary>
            
             </summary>
             <param name="e"></param>
             <returns>If we are in a Join context, returns a <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/>
             with the extent name, otherwise, a new <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/>
             with the From field set.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.GetTargetTSql(System.Data.Metadata.Edm.EntitySetBase)">
            <summary>
            Gets escaped TSql identifier describing this entity set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
            <summary>
            The bodies of <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/>, <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)"/>,
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbProjectExpression)"/>, <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbSortExpression)"/> are similar.
            Each does the following.
            <list type="number">
            <item> Visit the input expression</item>
            <item> Determine if the input's SQL statement can be reused, or a new
            one must be created.</item>
            <item>Create a new symbol table scope</item>
            <item>Push the Sql statement onto a stack, so that children can
            update the free variable list.</item>
            <item>Visit the non-input expression.</item>
            <item>Cleanup</item>
            </list>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Lambda functions are not supported.
            The functions supported are:
            <list type="number">
            <item>Canonical Functions - We recognize these by their dataspace, it is DataSpace.CSpace</item>
            <item>Store Functions - We recognize these by the BuiltInAttribute and not being Canonical</item>
            <item>User-defined Functions - All the rest except for Lambda functions</item>
            </list>
            We handle Canonical and Store functions the same way: If they are in the list of functions 
            that need special handling, we invoke the appropriate handler, otherwise we translate them to
            FunctionName(arg1, arg2, ..., argn).
            We translate user-defined functions to NamespaceName.FunctionName(arg1, arg2, ..., argn).
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression"/> is illegal at this stage
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/> for general details.
            We modify both the GroupBy and the Select fields of the SqlSelectStatement.
            GroupBy gets just the keys without aliases,
            and Select gets the keys and the aggregates with aliases.
            
            Whenever there exists at least one aggregate with an argument that is not is not a simple
            <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression"/>  over <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression"/>, 
            we create a nested query in which we alias the arguments to the aggregates. 
            That is due to the following two limitations of Cache Server:
            <list type="number">
            <item>If an expression being aggregated contains an outer reference, then that outer 
            reference must be the only column referenced in the expression </item>
            <item>Cache Server cannot perform an aggregate function on an expression containing 
            an aggregate or a subquery. </item>
            </list>
            
            The default translation, without inner query is: 
            
                SELECT 
                    kexp1 AS key1, kexp2 AS key2,... kexpn AS keyn, 
                    aggf1(aexpr1) AS agg1, .. aggfn(aexprn) AS aggn
                FROM input AS a
                GROUP BY kexp1, kexp2, .. kexpn
            
            When we inject an innner query, the equivalent translation is:
            
                SELECT 
                    key1 AS key1, key2 AS key2, .. keyn AS keys,  
                    aggf1(agg1) AS agg1, aggfn(aggn) AS aggn
                FROM (
                        SELECT 
                            kexp1 AS key1, kexp2 AS key2,... kexpn AS keyn, 
                            aexpr1 AS agg1, .. aexprn AS aggn
                        FROM input AS a
                    ) as a
                GROUP BY key1, key2, keyn
            
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)"/>
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
             <summary>
             Not(IsEmpty) has to be handled specially, so we delegate to
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitIsEmptyExpression(System.Data.Common.CommandTrees.DbIsEmptyExpression,System.Boolean)"/>.
            
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/>.
             <code>[NOT] EXISTS( ... )</code>
             </returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            Not(IsNull) is handled specially, so we delegate to
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitIsNullExpression(System.Data.Common.CommandTrees.DbIsNullExpression,System.Boolean)"/>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/>
            <code>IS [NOT] NULL</code>
            </returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitJoinExpression(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding},System.Data.Common.CommandTrees.DbExpressionKind,System.String,System.Data.Common.CommandTrees.DbExpression)"/>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/>.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitJoinExpression(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding},System.Data.Common.CommandTrees.DbExpressionKind,System.String,System.Data.Common.CommandTrees.DbExpression)"/>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/>.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
             <summary>
            
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
            <summary>
             Translates to TOP expression.
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
             <summary>
             DbNewInstanceExpression is allowed as a child of DbProjectExpression only.
             If anyone else is the parent, we throw.
             We also perform special casing for collections - where we could convert
             them into Unions
            
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitNewInstanceExpression(System.Data.Common.CommandTrees.DbNewInstanceExpression)"/> for the actual implementation.
            
             </summary>
             <param name="e"></param>
             <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
            <summary>
            The Not expression may cause the translation of its child to change.
            These children are
            <list type="bullet">
            <item><see cref="T:System.Data.Common.CommandTrees.DbNotExpression"/>NOT(Not(x)) becomes x</item>
            <item><see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression"/>NOT EXISTS becomes EXISTS</item>
            <item><see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression"/>IS NULL becomes IS NOT NULL</item>
            <item><see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression"/>= becomes&lt;&gt; </item>
            </list>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
            <summary>
            </summary>
            <param name="e"></param>
            <returns><see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
             <summary>
            
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
             <seealso cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbAndExpression)"/>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
             <summary>
            
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/> for the general ideas.
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/></returns>
            <seealso cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
             <summary>
             This method handles record flattening, which works as follows.
             consider an expression <c>Prop(y, Prop(x, Prop(d, Prop(c, Prop(b, Var(a)))))</c>
             where a,b,c are joins, d is an extent and x and y are fields.
             b has been flattened into a, and has its own SELECT statement.
             c has been flattened into b.
             d has been flattened into c.
            
             We visit the instance, so we reach Var(a) first.  This gives us a (join)symbol.
             Symbol(a).b gives us a join symbol, with a SELECT statement i.e. Symbol(b).
             From this point on , we need to remember Symbol(b) as the source alias,
             and then try to find the column.  So, we use a SymbolPair.
            
             We have reached the end when the symbol no longer points to a join symbol.
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.JoinSymbol"/> if we have not reached the first
             Join node that has a SELECT statement.
             A <see cref="T:InterSystems.Data.Entity.SQLGen.SymbolPair"/> if we have seen the JoinNode, and it has
             a SELECT statement.
             A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/> with {Input}.propertyName otherwise.
             </returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            Any(input, x) => Exists(Filter(input,x))
            All(input, x) => Not Exists(Filter(input, not(x))
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbRefExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
            <summary>
            For Sql9 it translates to:
            SELECT Y.x1, Y.x2, ..., Y.xn
            FROM (
                SELECT X.x1, X.x2, ..., X.xn, row_number() OVER (ORDER BY sk1, sk2, ...) AS [row_number] 
                FROM input as X 
                ) as Y
            WHERE Y.[row_number] &gt; count 
            ORDER BY sk1, sk2, ...
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/>
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/></returns>
            <seealso cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
            <summary>
            <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression"/> is illegal at this stage
            </summary>
            <param name="e"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
             <summary>
             This code is shared by <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbExceptExpression)"/>
             and <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)"/>
            
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitSetOpExpression(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.String)"/>
             Since the left and right expression may not be Sql select statements,
             we must wrap them up to look like SQL select statements.
             </summary>
             <param name="e"></param>
             <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
             <summary>
             This method determines whether an extent from an outer scope(free variable)
             is used in the CurrentSelectStatement.
            
             An extent in an outer scope, if its symbol is not in the FromExtents
             of the CurrentSelectStatement.
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.Symbol"/>.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitAggregate(System.Data.Common.CommandTrees.DbAggregate,System.Object)">
            <summary>
            Aggregates are not visited by the normal visitor walk.
            </summary>
            <param name="aggregate">The aggreate go be translated</param>
            <param name="aggregateArgument">The translated aggregate argument</param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitInputExpression(System.Data.Common.CommandTrees.DbExpression,System.String,System.Data.Metadata.Edm.TypeUsage,InterSystems.Data.Entity.SQLGen.Symbol@)">
            <summary>
            This is called by the relational nodes.  It does the following
            <list>
            <item>If the input is not a SqlSelectStatement, it assumes that the input
            is a collection expression, and creates a new SqlSelectStatement </item>
            </list>
            </summary>
            <param name="inputExpression"></param>
            <param name="inputVarName"></param>
            <param name="inputVarType"></param>
            <param name="fromSymbol"></param>
            <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/> and the main fromSymbol
            for this select statement.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitIsEmptyExpression(System.Data.Common.CommandTrees.DbIsEmptyExpression,System.Boolean)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)"/>
            </summary>
            <param name="e"></param>
            <param name="negate">Was the parent a DbNotExpression?</param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitCollectionConstructor(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            Translate a NewInstance(Element(X)) expression into
              "select top(1) * from X"
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitIsNullExpression(System.Data.Common.CommandTrees.DbIsNullExpression,System.Boolean)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)"/>
            </summary>
            <param name="e"></param>
            <param name="negate">Was the parent a DbNotExpression?</param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitJoinExpression(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding},System.Data.Common.CommandTrees.DbExpressionKind,System.String,System.Data.Common.CommandTrees.DbExpression)">
             <summary>
             This handles the processing of join expressions.
             The extents on a left spine are flattened, while joins
             not on the left spine give rise to new nested sub queries.
            
             Joins work differently from the rest of the visiting, in that
             the parent (i.e. the join node) creates the SqlSelectStatement
             for the children to use.
            
             The "parameter" IsInJoinContext indicates whether a child extent should
             add its stuff to the existing SqlSelectStatement, or create a new SqlSelectStatement
             By passing true, we ask the children to add themselves to the parent join,
             by passing false, we ask the children to create new Select statements for
             themselves.
            
             This method is called from <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbApplyExpression)"/> and
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbJoinExpression)"/>.
             </summary>
             <param name="inputs"></param>
             <param name="joinKind"></param>
             <param name="joinString"></param>
             <param name="joinCondition"></param>
             <returns> A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.ProcessJoinInputResult(InterSystems.Data.Entity.SQLGen.ISqlFragment,InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.Data.Common.CommandTrees.DbExpressionBinding,System.Int32)">
             <summary>
             This is called from <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitJoinExpression(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding},System.Data.Common.CommandTrees.DbExpressionKind,System.String,System.Data.Common.CommandTrees.DbExpression)"/>.
            
             This is responsible for maintaining the symbol table after visiting
             a child of a join expression.
            
             The child's sql statement may need to be completed.
            
             The child's result could be one of
             <list type="number">
             <item>The same as the parent's - this is treated specially.</item>
             <item>A sql select statement, which may need to be completed</item>
             <item>An extent - just copy it to the from clause</item>
             <item>Anything else (from a collection-valued expression) -
             unnest and copy it.</item>
             </list>
            
             If the input was a Join, we need to create a new join symbol,
             otherwise, we create a normal symbol.
            
             We then call AddFromSymbol to add the AS clause, and update the symbol table.
            
            
            
             If the child's result was the same as the parent's, we have to clean up
             the list of symbols in the FromExtents list, since this contains symbols from
             the children of both the parent and the child.
             The happens when the child visited is a Join, and is the leftmost child of
             the parent.
             </summary>
             <param name="fromExtentFragment"></param>
             <param name="result"></param>
             <param name="input"></param>
             <param name="fromSymbolStart"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitNewInstanceExpression(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
             <summary>
             We assume that this is only called as a child of a Project.
            
             This replaces <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)"/>, since
             we do not allow DbNewInstanceExpression as a child of any node other than
             DbProjectExpression.
            
             We write out the translation of each of the columns in the record.
             </summary>
             <param name="e"></param>
             <returns>A <see cref="T:InterSystems.Data.Entity.SQLGen.SqlBuilder"/></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsSpecialBuiltInFunction(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Determines whether the given function is a built-in function that requires special handling
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsSpecialCanonicalFunction(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Determines whether the given function is a canonical function that requires special handling
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleFunctionDefault(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Default handling for functions
            Translates them to FunctionName(arg1, arg2, ..., argn)
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleFunctionDefaultGivenName(System.Data.Common.CommandTrees.DbFunctionExpression,System.String)">
            <summary>
            Default handling for functions with a given name.
            Translates them to functionName(arg1, arg2, ..., argn)
            </summary>
            <param name="e"></param>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleFunctionArgumentsDefault(System.Data.Common.CommandTrees.DbFunctionExpression,InterSystems.Data.Entity.SQLGen.SqlBuilder)">
            <summary>
            Default handling on function arguments
            Appends the list of arguments to the given result
            If the function is niladic it does not append anything,
            otherwise it appends (arg1, arg2, ..., argn)
            </summary>
            <param name="e"></param>
            <param name="result"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleSpecialBuiltInFunction(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for special built in functions
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleSpecialCanonicalFunction(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for special canonical functions
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleSpecialFunction(System.Collections.Generic.Dictionary{System.String,InterSystems.Data.Entity.SQLGen.SqlGenerator.FunctionHandler},System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Dispatches the special function processing to the appropriate handler
            </summary>
            <param name="handlers"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleSpecialFunctionToOperator(System.Data.Common.CommandTrees.DbFunctionExpression,System.Boolean)">
            <summary>
            Handles functions that are translated into TSQL operators.
            The given function should have one or two arguments. 
            Functions with one arguemnt are translated into 
                op arg
            Functions with two arguments are translated into
                arg0 op arg1
            Also, the arguments can be optionaly enclosed in parethesis
            </summary>
            <param name="e"></param>
            <param name="parenthesiseArguments">Whether the arguments should be enclosed in parethesis</param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleConcatFunction(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleSpecialFunctionToOperator(System.Data.Common.CommandTrees.DbFunctionExpression,System.Boolean)"></see>
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionBitwise(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleSpecialFunctionToOperator(System.Data.Common.CommandTrees.DbFunctionExpression,System.Boolean)"></see>
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleDatepartDateFunction(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handles special case in which datapart 'type' parameter is present. all the functions
            handles here have *only* the 1st parameter as datepart. datepart value is passed along
            the QP as string and has to be expanded as TSQL keyword.
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDatepart(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for canonical funcitons for extracting date parts. 
            For example:
                Year(date) -> DATEPART( year, date)
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionGetTotalOffsetMinutes(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for canonical funcitons for GetTotalOffsetMinutes.
            GetTotalOffsetMinutes(e) --> Datepart(tzoffset, e)
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns> 
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDatepart(System.String,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for turning a canonical function into DATEPART
            Results in DATEPART(datepart, e)
            </summary>
            <param name="datepart"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionCurrentDateTimeOffset(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for the canonical function CurrentDateTimeOffset
            For Sql8 and Sql9:  throw
            For Sql10: CurrentDateTimeOffset() -> SysDateTimeOffset()
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionCreateDateTime(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            See <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateTimeTypeCreation(System.String,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},System.Boolean,System.Boolean)"/> for exact translation
            Pre Katmai creates datetime.
            On Katmai creates datetime2.
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionCreateDateTimeOffset(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            See <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateTimeTypeCreation(System.String,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},System.Boolean,System.Boolean)"/> for exact translation
            Pre Katmai not supported.
            On Katmai creates datetimeoffset.
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionCreateTime(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            See <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateTimeTypeCreation(System.String,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},System.Boolean,System.Boolean)"/> for exact translation
            Pre Katmai not supported.
            On Katmai creates time.
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.ParanthesizeExpressionIfNeeded(System.Data.Common.CommandTrees.DbExpression,InterSystems.Data.Entity.SQLGen.SqlBuilder)">
            <summary>
            Dump out an expression - optionally wrap it with parantheses if possible
            </summary>
            <param name="e"></param>
            <param name="result"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateTimeTypeCreation(System.String,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},System.Boolean,System.Boolean)">
            <summary>
            Helper for all date and time types creating functions. 
            
            The given expression is in general trainslated into:
            
            CONVERT(@typename, [datePart] + [timePart] + [timeZonePart], 121), where the datePart and the timeZonePart are optional
            
            Only on Katmai, if a date part is present it is wrapped with a call for adding years as shown below.
            The individual parts are translated as:
            
            Date part:  
                PRE KATMAI: convert(varchar(255), @year) + '-' + convert(varchar(255), @month) + '-' + convert(varchar(255), @day)
                    KATMAI: DateAdd(year, @year-1, covert(@typename, '0001' + '-' + convert(varchar(255), @month) + '-' + convert(varchar(255), @day)  + [possibly time ], 121)     
            
            Time part: 
            PRE KATMAI:  convert(varchar(255), @hour)+ ':' + convert(varchar(255), @minute)+ ':' + str(@second, 6, 3)
                KATMAI:  convert(varchar(255), @hour)+ ':' + convert(varchar(255), @minute)+ ':' + str(@second, 10, 7)
            
            Time zone part:
                (case when @tzoffset >= 0 then '+' else '-' end) + convert(varchar(255), ABS(@tzoffset)/60) + ':' + convert(varchar(255), ABS(@tzoffset)%60) 
            
            </summary>
            <param name="typeName"></param>
            <param name="args"></param>
            <param name="hasDatePart"></param>
            <param name="hasTimeZonePart"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AppendConvertToVarchar(InterSystems.Data.Entity.SQLGen.SqlBuilder,System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Helper method that wrapps the given expession with a conver to varchar(255)
            </summary>
            <param name="result"></param>
            <param name="e"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionTruncateTime(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            TruncateTime(DateTime X) 
              PreKatmai:    TRUNCATETIME(X) => CONVERT(DATETIME, CONVERT(VARCHAR(255), expression, 102),  102)
                 Katmai:    TRUNCATETIME(X) => CONVERT(DATETIME2, CONVERT(VARCHAR(255), expression, 102),  102)
                 
            TruncateTime(DateTimeOffset X) 
                            TRUNCATETIME(X) => CONVERT(datetimeoffset, CONVERT(VARCHAR(255), expression,  102) 
                                                + ' 00:00:00 ' +  Right(convert(varchar(255), @arg, 121), 6),  102)
                
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateAddKatmaiOrNewer(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for date addition functions supported only starting from Katmai
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateAdd(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for all date/time addition canonical functions.
            Translation, e.g.
            AddYears(datetime, number) =>  DATEADD(year, number, datetime)
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateDiffKatmaiOrNewer(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Hanndler for date differencing functions supported only starting from Katmai
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionDateDiff(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for all date/time addition canonical functions.
            Translation, e.g.
            DiffYears(datetime, number) =>  DATEDIFF(year, number, datetime)
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionIndexOf(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
             Function rename IndexOf -> CHARINDEX
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionNewGuid(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
             Function rename NewGuid -> NEWID
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionLength(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
             Function rename Length -> LEN
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionRound(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Round(numericExpression) -> Round(numericExpression, 0);
            Round(numericExpression, digits) -> Round(numericExpression, digits);
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionTruncate(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Truncate(numericExpression) -> Round(numericExpression, 0, 1); (does not exist as canonical function yet)
            Truncate(numericExpression, digits) -> Round(numericExpression, digits, 1);
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionRoundOrTruncate(System.Data.Common.CommandTrees.DbFunctionExpression,System.Boolean)">
            <summary>
            Common handler for the canonical functions ROUND and TRUNCATE
            </summary>
            <param name="e"></param>
            <param name="round"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionAbs(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handle the canonical function Abs(). 
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionTrim(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            TRIM(string) -> LTRIM(RTRIM(string))
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionLeft(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            LEFT(string, length) -> SUBSTR(string, 1, length)
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionRight(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            RIGHT(string, length) -> SUBSTR(string, -(length), length)
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionToLower(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
             Function rename ToLower -> LOWER
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionToUpper(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
             Function rename ToUpper -> UPPER
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.TranslateConstantParameterForLike(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbConstantExpression,InterSystems.Data.Entity.SQLGen.SqlBuilder,System.Boolean,System.Boolean)">
            <summary>
            Function to translate the StartsWith, EndsWith and Contains canonical functions to LIKE expression in T-SQL
            and also add the trailing ESCAPE '~' when escaping of the search string for the LIKE expression has occurred
            </summary>
            <param name="targetExpression"></param>
            <param name="constSearchParamExpression"></param>
            <param name="result"></param>
            <param name="insertPercentStart"></param>
            <param name="insertPercentEnd"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionContains(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for Contains. Wraps the normal translation with a case statement
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionContains(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},InterSystems.Data.Entity.SQLGen.SqlBuilder)">
            <summary>
            CONTAINS(arg0, arg1) => arg0 LIKE '%arg1%'
            </summary>
            <param name="sqlgen"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionStartsWith(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for StartsWith. Wraps the normal translation with a case statement
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionStartsWith(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},InterSystems.Data.Entity.SQLGen.SqlBuilder)">
            <summary>
            STARTSWITH(arg0, arg1) => arg0 LIKE 'arg1%'
            </summary>
            <param name="sqlgen"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionEndsWith(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Handler for EndsWith. Wraps the normal translation with a case statement
            </summary>
            <param name="sqlgen"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCanonicalFunctionEndsWith(InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},InterSystems.Data.Entity.SQLGen.SqlBuilder)">
            <summary>
            ENDSWITH(arg0, arg1) => arg0 LIKE '%arg1'
            </summary>
            <param name="sqlgen"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.WrapPredicate(System.Func{InterSystems.Data.Entity.SQLGen.SqlGenerator,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression},InterSystems.Data.Entity.SQLGen.SqlBuilder,InterSystems.Data.Entity.SQLGen.SqlBuilder},System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Turns a predicate into a statement returning a bit
            PREDICATE => CASE WHEN (PREDICATE) THEN CAST(1 AS BIT) WHEN (NOT (PREDICATE)) CAST (O AS BIT) END
            The predicate is produced by the given predicateTranslator.
            </summary>
            <param name="predicateTranslator"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddColumns(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,InterSystems.Data.Entity.SQLGen.Symbol,System.Collections.Generic.List{InterSystems.Data.Entity.SQLGen.Symbol},System.Collections.Generic.Dictionary{System.String,InterSystems.Data.Entity.SQLGen.Symbol},System.String@)">
             <summary>
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddDefaultColumns(InterSystems.Data.Entity.SQLGen.SqlSelectStatement)"/>
             Add the column names from the referenced extent/join to the
             select statement.
            
             If the symbol is a JoinSymbol, we recursively visit all the extents,
             halting at real extents and JoinSymbols that have an associated SqlSelectStatement.
            
             The column names for a real extent can be derived from its type.
             The column names for a Join Select statement can be got from the
             list of columns that was created when the Join's select statement
             was created.
            
             We do the following for each column.
             <list type="number">
             <item>Add the SQL string for each column to the SELECT clause</item>
             <item>Add the column to the list of columns - so that it can
             become part of the "type" of a JoinSymbol</item>
             <item>Check if the column name collides with a previous column added
             to the same select statement.  Flag both the columns for renaming if true.</item>
             <item>Add the column to a name lookup dictionary for collision detection.</item>
             </list>
             </summary>
             <param name="selectStatement">The select statement that started off as SELECT *</param>
             <param name="symbol">The symbol containing the type information for
             the columns to be added.</param>
             <param name="columnList">Columns that have been added to the Select statement.
             This is created in <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddDefaultColumns(InterSystems.Data.Entity.SQLGen.SqlSelectStatement)"/>.</param>
             <param name="columnDictionary">A dictionary of the columns above.</param>
             <param name="separator">Comma or nothing, depending on whether the SELECT
             clause is empty.</param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddDefaultColumns(InterSystems.Data.Entity.SQLGen.SqlSelectStatement)">
             <summary>
             Expands Select * to "select the_list_of_columns"
             If the columns are taken from an extent, they are written as
             {original_column_name AS Symbol(original_column)} to allow renaming.
            
             If the columns are taken from a Join, they are written as just
             {original_column_name}, since there cannot be a name collision.
            
             We concatenate the columns from each of the inputs to the select statement.
             Since the inputs may be joins that are flattened, we need to recurse.
             The inputs are inferred from the symbols in FromExtents.
             </summary>
             <param name="selectStatement"></param>
             <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddFromSymbol(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.String,InterSystems.Data.Entity.SQLGen.Symbol)">
            <summary>
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddFromSymbol(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.String,InterSystems.Data.Entity.SQLGen.Symbol,System.Boolean)"/>
            </summary>
            <param name="selectStatement"></param>
            <param name="inputVarName"></param>
            <param name="fromSymbol"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddFromSymbol(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.String,InterSystems.Data.Entity.SQLGen.Symbol,System.Boolean)">
             <summary>
             This method is called after the input to a relational node is visited.
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbProjectExpression)"/> and <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.ProcessJoinInputResult(InterSystems.Data.Entity.SQLGen.ISqlFragment,InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.Data.Common.CommandTrees.DbExpressionBinding,System.Int32)"/>
             There are 2 scenarios
             <list type="number">
             <item>The fromSymbol is new i.e. the select statement has just been
             created, or a join extent has been added.</item>
             <item>The fromSymbol is old i.e. we are reusing a select statement.</item>
             </list>
            
             If we are not reusing the select statement, we have to complete the
             FROM clause with the alias
             <code>
             -- if the input was an extent
             FROM = [SchemaName].[TableName]
             -- if the input was a Project
             FROM = (SELECT ... FROM ... WHERE ...)
             </code>
            
             These become
             <code>
             -- if the input was an extent
             FROM = [SchemaName].[TableName] AS alias
             -- if the input was a Project
             FROM = (SELECT ... FROM ... WHERE ...) AS alias
             </code>
             and look like valid FROM clauses.
            
             Finally, we have to add the alias to the global list of aliases used,
             and also to the current symbol table.
             </summary>
             <param name="selectStatement"></param>
             <param name="inputVarName">The alias to be used.</param>
             <param name="fromSymbol"></param>
             <param name="addToSymbolTable"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AddSortKeys(InterSystems.Data.Entity.SQLGen.SqlBuilder,System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})">
            <summary>
            Translates a list of SortClauses.
            Used in the translation of OrderBy 
            </summary>
            <param name="orderByClause">The SqlBuilder to which the sort keys should be appended</param>
            <param name="sortKeys"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.CreateNewSelectStatement(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.String,System.Data.Metadata.Edm.TypeUsage,InterSystems.Data.Entity.SQLGen.Symbol@)">
            <summary>
            </summary>
            <param name="oldStatement"></param>
            <param name="inputVarName"></param>
            <param name="inputVarType"></param>
            <param name="fromSymbol"></param>
            <returns>A new select statement, with the old one as the from clause.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.CreateNewSelectStatement(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.String,System.Data.Metadata.Edm.TypeUsage,System.Boolean,InterSystems.Data.Entity.SQLGen.Symbol@)">
             <summary>
             This is called after a relational node's input has been visited, and the
             input's sql statement cannot be reused.  <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbProjectExpression)"/>
            
             When the input's sql statement cannot be reused, we create a new sql
             statement, with the old one as the from clause of the new statement.
            
             The old statement must be completed i.e. if it has an empty select list,
             the list of columns must be projected out.
            
             If the old statement being completed has a join symbol as its from extent,
             the new statement must have a clone of the join symbol as its extent.
             We cannot reuse the old symbol, but the new select statement must behave
             as though it is working over the "join" record.
             </summary>
             <param name="oldStatement"></param>
             <param name="inputVarName"></param>
             <param name="inputVarType"></param>
             <param name="finalizeOldStatement"></param>
             <param name="fromSymbol"></param>
             <returns>A new select statement, with the old one as the from clause.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.EscapeSingleQuote(System.String,System.Boolean)">
            <summary>
            Before we embed a string literal in a SQL string, we should
            convert all ' to '', and enclose the whole string in single quotes.
            </summary>
            <param name="s"></param>
            <param name="isUnicode"></param>
            <returns>The escaped sql string.</returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.GetSqlPrimitiveType(System.Data.Metadata.Edm.TypeUsage)">
            <summary>
            Returns the sql primitive/native type name. 
            It will include size, precision or scale depending on type information present in the 
            type facets
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.HandleCountExpression(System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Handles the expression represending DbLimitExpression.Limit and DbSkipExpression.Count.
            If it is a constant expression, it simply does to string thus avoiding casting it to the specific value
            (which would be done if <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbConstantExpression)"/> is called)
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsApplyExpression(System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            This is used to determine if a particular expression is an Apply operation.
            This is only the case when the DbExpressionKind is CrossApply or OuterApply.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsJoinExpression(System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            This is used to determine if a particular expression is a Join operation.
            This is true for DbCrossJoinExpression and DbJoinExpression, the
            latter of which may have one of several different ExpressionKinds.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsComplexExpression(System.Data.Common.CommandTrees.DbExpression)">
             <summary>
             This is used to determine if a calling expression needs to place
             round brackets around the translation of the expression e.
            
             Constants, parameters and properties do not require brackets,
             everything else does.
             </summary>
             <param name="e"></param>
             <returns>true, if the expression needs brackets </returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsCompatible(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,System.Data.Common.CommandTrees.DbExpressionKind)">
            <summary>
            Determine if the owner expression can add its unique sql to the input's
            SqlSelectStatement
            </summary>
            <param name="result">The SqlSelectStatement of the input to the relational node.</param>
            <param name="expressionKind">The kind of the expression node(not the input's)</param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.QuoteIdentifier(System.String)">
            <summary>
            We use the normal box quotes for SQL server.  We do not deal with ANSI quotes
            i.e. double quotes.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitExpressionEnsureSqlStatement(System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Simply calls <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitExpressionEnsureSqlStatement(System.Data.Common.CommandTrees.DbExpression,System.Boolean)"/>
            with addDefaultColumns set to true
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitExpressionEnsureSqlStatement(System.Data.Common.CommandTrees.DbExpression,System.Boolean)">
             <summary>
             This is called from <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.GenerateSql(System.Data.Common.CommandTrees.DbQueryCommandTree)"/> and nodes which require a
             select statement as an argument e.g. <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)"/>,
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)"/>.
            
             SqlGenerator needs its child to have a proper alias if the child is
             just an extent or a join.
            
             The normal relational nodes result in complete valid SQL statements.
             For the rest, we need to treat them as there was a dummy
             <code>
             -- originally {expression}
             -- change that to
             SELECT *
             FROM {expression} as c
             </code>
             
             DbLimitExpression needs to start the statement but not add the default columns
             </summary>
             <param name="e"></param>
             <param name="addDefaultColumns"></param>
             <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.VisitFilterExpression(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression,System.Boolean)">
             <summary>
             This method is called by <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbFilterExpression)"/> and
             <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)"/>
            
             </summary>
             <param name="input"></param>
             <param name="predicate"></param>
             <param name="negatePredicate">This is passed from <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)"/>
             in the All(...) case.</param>
             <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.WrapNonQueryExtent(InterSystems.Data.Entity.SQLGen.SqlSelectStatement,InterSystems.Data.Entity.SQLGen.ISqlFragment,System.Data.Common.CommandTrees.DbExpressionKind)">
            <summary>
            If the sql fragment for an input expression is not a SqlSelect statement
            or other acceptable form (e.g. an extent as a SqlBuilder), we need
            to wrap it in a form acceptable in a FROM clause.  These are
            primarily the
            <list type="bullet">
            <item>The set operation expressions - union all, intersect, except</item>
            <item>TVFs, which are conceptually similar to tables</item>
            </list>
            </summary>
            <param name="result"></param>
            <param name="sqlFragment"></param>
            <param name="expressionKind"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsBuiltinFunction(System.Data.Metadata.Edm.EdmFunction)">
            <summary>
            Is this a builtin function (ie) does it have the builtinAttribute specified?
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.WriteFunctionName(InterSystems.Data.Entity.SQLGen.SqlBuilder,System.Data.Metadata.Edm.EdmFunction)">
             <summary>
            
             </summary>
             <param name="function"></param>
             <param name="result"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.NeedsInnerQuery(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbAggregate})">
            <summary>
            Helper method for the Group By visitor
            Returns true if at least one of the aggregates in the given list
            has an argument that is not a <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression"/> 
            over <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression"/>
            </summary>
            <param name="aggregates"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsPropertyOverVarRef(System.Data.Common.CommandTrees.DbExpression)">
            <summary>
            Determines whether the given expression is a <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression"/> 
            over <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AssertKatmaiOrNewer(System.Data.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
            Throws not supported exception if the server is pre-katmai
            </summary>
            <param name="primitiveTypeKind"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.AssertKatmaiOrNewer(System.Data.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Throws not supported exception if the server is pre-katmai
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.SqlGenerator.CurrentSelectStatement">
            <summary>
            The top of the stack
            </summary>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.SqlGenerator.IsParentAJoin">
            <summary>
            The top of the stack
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.SqlSelectStatement">
             <summary>
             A SqlSelectStatement represents a canonical SQL SELECT statement.
             It has fields for the 5 main clauses
             <list type="number">
             <item>SELECT</item>
             <item>FROM</item>
             <item>WHERE</item>
             <item>GROUP BY</item>
             <item>ORDER BY</item>
             </list>
             We do not have HAVING, since it does not correspond to anything in the DbCommandTree.
             Each of the fields is a SqlBuilder, so we can keep appending SQL strings
             or other fragments to build up the clause.
            
             We have a IsDistinct property to indicate that we want distict columns.
             This is given out of band, since the input expression to the select clause
             may already have some columns projected out, and we use append-only SqlBuilders.
             The DISTINCT is inserted when we finally write the object into a string.
             
             Also, we have a Top property, which is non-null if the number of results should
             be limited to certain number. It is given out of band for the same reasons as DISTINCT.
            
             The FromExtents contains the list of inputs in use for the select statement.
             There is usually just one element in this - Select statements for joins may
             temporarily have more than one.
            
             If the select statement is created by a Join node, we maintain a list of
             all the extents that have been flattened in the join in AllJoinExtents
             <example>
             in J(j1= J(a,b), c)
             FromExtents has 2 nodes JoinSymbol(name=j1, ...) and Symbol(name=c)
             AllJoinExtents has 3 nodes Symbol(name=a), Symbol(name=b), Symbol(name=c)
             </example>
            
             If any expression in the non-FROM clause refers to an extent in a higher scope,
             we add that extent to the OuterExtents list.  This list denotes the list
             of extent aliases that may collide with the aliases used in this select statement.
             It is set by <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)"/>.
             An extent is an outer extent if it is not one of the FromExtents.
            
            
             </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlSelectStatement.WriteSql(InterSystems.Data.Entity.SQLGen.SqlWriter,InterSystems.Data.Entity.SQLGen.SqlGenerator)">
            <summary>
            Write out a SQL select statement as a string.
            We have to
            <list type="number">
            <item>Check whether the aliases extents we use in this statement have
            to be renamed.
            We first create a list of all the aliases used by the outer extents.
            For each of the FromExtents( or AllJoinExtents if it is non-null),
            rename it if it collides with the previous list.
            </item>
            <item>Write each of the clauses (if it exists) as a string</item>
            </list>
            </summary>
            <param name="writer"></param>
            <param name="sqlGenerator"></param>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.SqlSelectStatement.IsDistinct">
            <summary>
            Do we need to add a DISTINCT at the beginning of the SELECT
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.SqlWriter">
            <summary>
            This extends StringWriter primarily to add the ability to add an indent
            to each line that is written out.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlWriter.Write(System.String)">
            <summary>
            Reset atBeginningofLine if we detect the newline string.
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlBuilder.AppendLine"/>
            Add as many tabs as the value of indent if we are at the 
            beginning of a line.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.SqlWriter.WriteLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.SqlWriter.Indent">
            <summary>
            The number of tabs to be added at the beginning of each new line.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.SymbolPair">
            <summary>
            The SymbolPair exists to solve the record flattening problem.
            <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)"/>
            Consider a property expression D(v, "j3.j2.j1.a.x")
            where v is a VarRef, j1, j2, j3 are joins, a is an extent and x is a columns.
            This has to be translated eventually into {j'}.{x'}
            
            The source field represents the outermost CacheStatement representing a join
            expression (say j2) - this is always a Join symbol.
            
            The column field keeps moving from one join symbol to the next, until it
            stops at a non-join symbol.
            
            This is returned by <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)"/>,
            but never makes it into a SqlBuilder.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.SymbolTable">
            <summary>
            The symbol table is quite primitive - it is a stack with a new entry for
            each scope.  Lookups search from the top of the stack to the bottom, until
            an entry is found.
            
            The symbols are of the following kinds
            <list type="bullet">
            <item><see cref="T:InterSystems.Data.Entity.SQLGen.Symbol"/> represents tables (extents/nested selects/unnests)</item>
            <item><see cref="T:InterSystems.Data.Entity.SQLGen.JoinSymbol"/> represents Join nodes</item>
            <item><see cref="T:InterSystems.Data.Entity.SQLGen.Symbol"/> columns.</item>
            </list>
            
            Symbols represent names <see cref="M:InterSystems.Data.Entity.SQLGen.SqlGenerator.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)"/> to be resolved, 
            or things to be renamed.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.SQLGen.TopClause">
            <summary>
            TopClause represents the a TOP expression in a SqlSelectStatement. 
            It has a count property, which indicates how many TOP rows should be selected and a 
            boolen WithTies property.
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.TopClause.#ctor(InterSystems.Data.Entity.SQLGen.ISqlFragment,System.Boolean)">
            <summary>
            Creates a TopClause with the given topCount and withTies.
            </summary>
            <param name="topCount"></param>
            <param name="withTies"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.TopClause.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a TopClause with the given topCount and withTies.
            </summary>
            <param name="topCount"></param>
            <param name="withTies"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.TopClause.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a TopClause with the given topCount and withTies.
            </summary>
            <param name="_all"></param>
            <param name="withTies"></param>
        </member>
        <member name="M:InterSystems.Data.Entity.SQLGen.TopClause.WriteSql(InterSystems.Data.Entity.SQLGen.SqlWriter,InterSystems.Data.Entity.SQLGen.SqlGenerator)">
            <summary>
            Write out the TOP part of sql select statement 
            It basically writes TOP (X) 
            [WITH TIES] is not supported.
            </summary>
            <param name="writer"></param>
            <param name="sqlGenerator"></param>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.TopClause.WithTies">
            <summary>
            Do we need to add a WITH_TIES to the top statement
            </summary>
        </member>
        <member name="P:InterSystems.Data.Entity.SQLGen.TopClause.TopCount">
            <summary>
            How many top rows should be selected.
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.StoreVersion">
            <summary>
            This enum describes the current server version
            </summary>
            This may be removed shortly, but may need to track the version of Cache in the future to determine features
        </member>
        <member name="F:InterSystems.Data.Entity.StoreVersion.Sql9">
            <summary>
            Sql Server 9
            </summary>
        </member>
        <member name="F:InterSystems.Data.Entity.StoreVersion.Sql10">
            <summary>
            Sql Server 10
            </summary>
        </member>
        <member name="T:InterSystems.Data.Entity.StoreVersionUtils">
            <summary>
            This class is a simple utility class that determines the sql version from the 
            connection
            </summary>
        </member>
        <member name="M:InterSystems.Data.Entity.StoreVersionUtils.GetStoreVersion(InterSystems.Data.IRISClient.IRISADOConnection)">
            <summary>
            Get the StoreVersion from the connection. Returns one of Sql8, Sql9, Sql10
            </summary>
            <param name="connection">current sql connection</param>
            <returns>Sql Version for the current connection</returns>
        </member>
    </members>
</doc>
